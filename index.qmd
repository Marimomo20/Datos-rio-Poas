---
title: "Río Poás"
author: "Mariana Morales"
format:
  html:
    toc: true      # Activa el índice
    toc-title: "Índice"  # Cambia el título del índice (opcional)
    toc-depth: 2   # Profundidad del índice (niveles de encabezado)
    number-sections: true  # Numera las secciones
editor: visual
---

## Generalidades

Estos datos pertenecen a un transecto del río Poás de Alajuela ubicado en Finca La Hilda. El código presentado más adelante fue creado para construir una gráfica interactiva por medio de 2 archivos importantes, uno que contiene la información de los sensores "Datos sensores.csv" y el otro archivo contiene la fecha y hora de cada uno de los videos disponibles "videos.csv". Consulte la disponibilidad de datos en el siguiente correo mariana.moralesmorales\@ucr.ac.cr. El objetivo con esta gráfica es tener una descripción visual de los datos y los videos para seleccionar los que corresponden a los eventos más significativos, posteriormente los videos seleccionados serán procesados con el software Fudaa.

## Variables

La variable "VEGA_E" se refiere al sensor de nivel del río y la variable "vitesse" corresponde al sensor de velocidad, sin embargo, el mismo dejó de funcionar el 03 de noviembre del 2024 a las 00:20. Por lo tanto para la creación de la gráfica solo se ha tomado en cuenta el nivel del río.

## Código

Este código fue creado utilizando Rstudio version 2024.12.1 mediante la creación de un documeto quarto.

```{r}
#| warning: false
#| message: false

# Cargar librerías
library(dplyr)
library(lubridate)
library(ggplot2)
library(readr)
library(plotly)
library(zoo)
```

```{r}
#| warning: false
#| message: false

# Cargar los archivos
videos <- read_delim("videos.csv", delim = ";", col_types = cols(.default = "c"))
datos <- read_delim("Datos sensores.csv", delim = ";", col_types = cols(.default = "c"))

# Cargar el nuevo archivo de muestras
muestras <- read_delim("Muestras.csv", delim = ";", col_types = cols(.default = "c"))

```

```{r}
#| warning: false
#| message: false
 
# Convertir VEGA_E a numérico, reemplazando comas por puntos
datos <- datos %>% mutate(VEGA_E = as.numeric(gsub(",", ".", VEGA_E)))

# Convertir y reemplazar comas por puntos
muestras <- muestras %>% mutate(
  DateTime = dmy_hm(DateTime),
  Conductividad = as.numeric(gsub(",", ".", Conductividad)),
  pH = as.numeric(gsub(",", ".", pH)),
  Temperatura = as.numeric(gsub(",", ".", Temperatura)),
  Concentracion = as.numeric(gsub(",", ".", Concentracion))
)
```

```{r}
#| warning: false
#| message: false

# Convertir las fechas y horas a formato datetime
videos <- videos %>% mutate(DateTime = dmy_hms(paste(Fecha, Hora)))
datos <- datos %>% mutate(DateTime = dmy_hms(paste(Date, Time)))

```

```{r}
#| warning: false
#| message: false

# Redondear al minuto más cercano
videos <- videos %>% mutate(DateTime = round_date(DateTime, "minute"))
datos <- datos %>% mutate(DateTime = round_date(DateTime, "minute"))
muestras <- muestras %>% mutate(DateTime= round_date(DateTime, "minute"))

# Eliminar filas con valores nulos en DateTime
videos <- videos %>% filter(!is.na(DateTime))
datos <- datos %>% filter(!is.na(DateTime))
```

```{r}
#| warning: false
#| message: false

# Ordenar por DateTime
videos <- videos %>% arrange(DateTime)
datos <- datos %>% arrange(DateTime)
muestras <- muestras %>% arrange(DateTime)

```

```{r}
#| warning: false
#| message: false

# Función para encontrar el valor más cercano
encontrar_mas_cercano <- function(fecha, df) {
  dif <- abs(difftime(df$DateTime, fecha, units = "mins"))
  df$VEGA_E[which.min(dif)]
}
```

```{r}
#| warning: false
#| message: false

# Aplicar la función para asignar el valor más cercano de VEGA_E
videos <- videos %>% mutate(VEGA_E = sapply(DateTime, encontrar_mas_cercano, df = datos))
muestras <- muestras %>% mutate(VEGA_E = sapply(DateTime, encontrar_mas_cercano, df = datos))


# Guardar el resultado final con ; como separador
write_delim(videos, "valores_vega_filtrados.csv", delim = ";")
```

```{r}
#| warning: false
#| message: false

# Cargar el archivo generado correctamente
valores_filtrados <- read_delim("valores_vega_filtrados.csv", delim = ";", col_types = cols(DateTime = col_character(), VEGA_E = col_double()))
```

```{r}
#| warning: false
#| message: false

# Convertir DateTime nuevamente a formato datetime
valores_filtrados <- valores_filtrados %>% mutate(DateTime = ymd_hms(DateTime))

```

```{r}
#| warning: false
#| message: false

# Crear una columna que identifica si el dato es de "día" o "noche"
valores_filtrados <- valores_filtrados %>%
  mutate(Hora = hour(DateTime) + minute(DateTime)/60, # Convertir a horas decimales
         Dia_Noche = ifelse(
           Hora >= 7 & Hora <= 17.5, "Dia", "Noche"))

# Crear una columna con los colores según "Dia" o "Noche"
valores_filtrados <- valores_filtrados %>%
  mutate(color = ifelse(Dia_Noche == "Dia", 'gold', 'darkslategrey'))

#Seleccionar columnas importantes
valores_filtrados <- select(valores_filtrados, DateTime, VEGA_E, color)

#Eliminar filas con valores nulos
valores_filtrados <- na.omit(valores_filtrados)
```



## Carga de los datos de lluvia

```{r}
#| warning: false
#| message: false

# Cargar el archivo Lluvia.csv
lluvia <- read_delim("Lluvia.csv", delim = ";", col_types = cols(.default = "c"))
```


```{r}
#| warning: false
#| message: false

# Convertir la columna 'date' y 'time' en una columna DateTime
lluvia$DateTime <- as.POSIXct(paste(lluvia$date, lluvia$time), format = "%d/%m/%Y %H:%M:%S")
```


```{r}
#| warning: false
#| message: false

# Convertir y reemplazar comas por puntos
lluvia <- lluvia %>% mutate(Rain = as.numeric(gsub(",", ".", Rain)))


```


```{r}
#| warning: false
#| message: false

# Acumulado de 1 hora
lluvia_1h <- lluvia %>%
  mutate(Hora = floor_date(DateTime, "hour")) %>%  # Agrupar por hora
  group_by(Hora) %>%
  summarise(Rain_1h = sum(Rain, na.rm = TRUE))

# Acumulado de 3 horas
lluvia_3h <- lluvia %>%
  mutate(Hora_3h = floor_date(DateTime, "3 hours")) %>%  # Agrupar por 3 horas
  group_by(Hora_3h) %>%
  summarise(Rain_3h = sum(Rain, na.rm = TRUE))

# Acumulado de 12 horas
lluvia_12h <- lluvia %>%
  mutate(Hora_12h = floor_date(DateTime, "12 hours")) %>%  # Agrupar por 12 horas
  group_by(Hora_12h) %>%
  summarise(Rain_12h = sum(Rain, na.rm = TRUE))

```





## Gráfica interactiva

```{r}
#| warning: false
#| message: false

# Crear la gráfica interactiva
fig <- plot_ly()

# Agregar la serie original de VEGA_E en el eje primario (izquierdo)
fig <- fig %>% add_trace(
  x = datos$DateTime, 
  y = datos$VEGA_E, 
  type = "scatter", 
  mode = "lines", 
  name = "Nivel",
  line = list(color = "blue"),
  yaxis = "y1"
)


# Agregar la serie de VEGA_E filtrado en el eje primario (izquierdo)
fig <- fig %>% add_trace(
  x = valores_filtrados$DateTime, 
  y = valores_filtrados$VEGA_E, 
  type = "scatter", 
  mode = "markers", 
  name = "Videos",
  marker = list(
    color = valores_filtrados$color, # Usar la columna 'color'
    size = 6
  ),
  yaxis = "y1"
)

# Agregar Conductividad en el eje secundario (derecho)
fig <- fig %>% add_trace(
  x = muestras$DateTime, 
  y = muestras$`Conductividad`, 
  type = "scatter", 
  mode = "markers", 
  name = "Conductividad (uS/cm)",
  marker = list(color = "green", size = 6),
  yaxis = "y2",
  visible = "legendonly"
)

# Agregar pH en el eje secundario (derecho)
fig <- fig %>% add_trace(
  x = muestras$DateTime, 
  y = muestras$`pH`, 
  type = "scatter", 
  mode = "markers", 
  name = "pH",
  marker = list(color = "purple", size = 6),
  yaxis = "y2",
  visible = "legendonly"
)

# Agregar Temperatura en el eje secundario (derecho)
fig <- fig %>% add_trace(
  x = muestras$DateTime, 
  y = muestras$`Temperatura`, 
  type = "scatter", 
  mode = "markers", 
  name = "Temperatura (°C)",
  marker = list(color = "orange", size = 6),
  yaxis = "y2",
  visible = "legendonly"
)

# Agregar Concentración de sedimento en el eje secundario (derecho)
fig <- fig %>% add_trace(
  x = muestras$DateTime, 
  y = muestras$`Concentracion`, 
  type = "scatter", 
  mode = "markers", 
  name = "Concentración (g/L)",
  marker = list(color = "brown", size = 6),
  yaxis = "y2",
  visible = "legendonly"
)


# Agregar lluvia acumulada de 1 hora en el eje secundario como barras invertidas
fig <- fig %>% add_trace(
  x = lluvia_1h$Hora, 
  y = -lluvia_1h$Rain_1h,  # Invertimos los valores
  type = "bar", 
  name = "Lluvia Acumulada (1h)",
  marker = list(color = "cadetblue"),
  yaxis = "y2",
  visible = "legendonly"
)

# Agregar lluvia acumulada de 3 horas en el eje secundario como barras invertidas
fig <- fig %>% add_trace(
  x = lluvia_3h$Hora_3h, 
  y = -lluvia_3h$Rain_3h,  # Invertimos los valores
  type = "bar", 
  name = "Lluvia Acumulada (3h)",
  marker = list(color = "midnightblue"),
  yaxis = "y2",
  visible = "legendonly"
)

# Agregar lluvia acumulada de 12 horas en el eje secundario como barras invertidas
fig <- fig %>% add_trace(
  x = lluvia_12h$Hora_12h, 
  y = -lluvia_12h$Rain_12h,  # Invertimos los valores
  type = "bar", 
  name = "Lluvia Acumulada (12h)",
  marker = list(color = "darkturquoise"),
  yaxis = "y2",
  visible = "legendonly"
)

fig <- fig %>% layout(
  title = "Comparación de VEGA_E y Parámetros de Muestras",
  xaxis = list(title = "Fecha", type = "date"),
  yaxis = list(
    title = "VEGA_E",
    side = "left",
    showgrid = FALSE
  ),
  yaxis2 = list(
    side = "right",
    overlaying = "y",
    showgrid = TRUE,
    title_standoff = 30,  # Ajustar la distancia entre el título y el eje
    ticklen = 6,          # Ajustar la longitud de las marcas de los ticks
    tickangle = 0         # Ajustar el ángulo
  ),
  legend = list(
    orientation = "h",     # horizontal
    x = 0,                 # alineado a la izquierda
    y = -0.2               # debajo del eje X
  ),
  hovermode = "x",
  width = 800,
  height = 450,
  margin = list(r = 100)  # Ajustar el margen derecho para dar espacio al eje secundario
)

# Mostrar la gráfica interactiva
fig
```



